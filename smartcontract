// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract Smartcontract {
    uint public totalValue;
    address public owner;

    constructor() {
        owner = msg.sender;
    }

    function deposit(uint amount) public {
        require(amount > 0, "Amount must be greater than zero");
        totalValue += amount;
    }

    function withdraw(uint amount) public {
        require(msg.sender == owner, "Only the contract owner can withdraw");
        require(amount <= totalValue, "Insufficient balance");
        totalValue -= amount;
    }

    function divide(uint numerator, uint denominator) public pure returns (uint) {
        require(denominator > 0, "Denominator must be greater than zero");
        assert(numerator / denominator > 0);
        return numerator / denominator;
    }

    function triggerRevert() public pure {
        revert("This function always reverts");
    }
}
